#! /usr/bin/env bash

if [ -f .env ]; then
  # shellcheck disable=SC1091
  source .env
fi

publish_chrome_extension() {
  bun run chrome-webstore-upload publish \
    --source dist/chrome.zip \
    --extension-id "$CHROME_EXTENSION_ID" \
    --client-id "$CHROME_CLIENT_ID" \
    --client-secret "$CHROME_CLIENT_SECRET" \
    --refresh-token "$CHROME_REFRESH_TOKEN"
}

check_for_review_error() {
  echo "$1" | grep -q "You may not edit or publish an item that is in review"
}

# If we get a 'publish' argument, try to publish the extension rather than building it.
if [ "$1" == "publish" ]; then
    chromeStatus=$(publish_chrome_extension)

  retry_count=0

  while check_for_review_error "$chromeStatus" && [ $retry_count -lt 12 ]; do
    echo "Extension is in review. Retrying in 5 minutes..."
    sleep 300
    chromeStatus=$(publish_chrome_extension)
    ((retry_count++))
  done

  if check_for_review_error "$chromeStatus"; then
    echo "Failed to publish extension after multiple attempts. Extension is still in review."
  else
    echo "Extension published successfully."
  fi

  exit 0
fi

# Make sure the working directory is clean.
if [ -n "$(git status --porcelain)" ]; then
  echo "Working directory is not clean, commit the changes first."
  exit 1
fi

bun run lint || exit 1

version=$(jq -r .version package.json)

git tag -a "v$version" -m "Release v$version" || exit 1

# Build the extension.
bun run clean
bun run build:extension:chrome --release
bun run build:extension:firefox --release

# Upload debug symbols to Sentry.
bun run sentry-cli releases new --org mousehunt --project mh-improved "mousehunt-improved@$version"
bun run sentry-cli sourcemaps inject --org mousehunt --project mh-improved ./dist --release "mousehunt-improved@$version"
bun run sentry-cli sourcemaps upload --org mousehunt --project mh-improved ./dist --release "mousehunt-improved@$version"

# Build the extra files.
bun run build:zips
bun run build:archive

bun run build:userscript

# Get the changelog for the release.
changelog=$(awk "/## Version/{flag++; if(flag==2) exit} flag" CHANGELOG.md | sed '1,2d')

git push origin main
git push origin "v$version"

# Create a GitHub release.
gh release create "v$version" dist/chrome.zip dist/firefox.zip dist/mousehunt-improved.user.js dist/archive.zip \
  --title "MouseHunt Improved $version" \
  --notes "$changelog"

# Upload to Chrome Web Store.
bun run chrome-webstore-upload upload \
  --source dist/chrome.zip \
  --auto-publish \
  --extension-id "$CHROME_EXTENSION_ID" \
  --client-id "$CHROME_CLIENT_ID" \
  --client-secret "$CHROME_CLIENT_SECRET" \
  --refresh-token "$CHROME_REFRESH_TOKEN"

# Upload to Firefox Add-ons.
bun run web-ext sign \
  --source-dir dist/firefox \
  --upload-source-code dist/archive.zip \
  --api-key "$FIREFOX_JWT_ISSUER" \
  --api-secret "$FIREFOX_JWT_SECRET" \
  --channel "listed" > /dev/null 2>&1 && rm web-ext-artifacts/*.xpi > /dev/null 2>&1 && rmdir web-ext-artifacts > /dev/null 2>&1 &

# Build the userscript and push to a branch.
cp dist/mousehunt-improved.user.js /tmp
git checkout userscript-build || exit 1
git rm -rf .
mkdir -p dist
mv /tmp/mousehunt-improved.user.js dist/
git add dist/mousehunt-improved.user.js
git commit -m "Userscript v$version"
git push origin userscript-build
git checkout main

# Update static.mouse.rip if the _update_static_mouse_rip command is available.
if [ -n "$UPDATE_STATIC_MOUSE_RIP" ]; then
  $UPDATE_STATIC_MOUSE_RIP
fi
